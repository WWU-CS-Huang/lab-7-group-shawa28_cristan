/*
 * This source file was generated by the Gradle 'init' task
 */
package lab7;

import java.util.HashMap;
import java.io.File;
import java.util.Scanner;
import java.util.Arrays;
import java.util.Map;
import java.util.PriorityQueue;

class Node {
	Character character;
    Integer freq;
	Node left;
    Node right;

    Node(Integer freq, Character Character){
        character = character;
        freq = freq;
        left = null;
        right = null;
    }
}

public class Huffman {

    public static HashMap<Character, Integer> freq = new HashMap<Character, Integer>();
    public static PriorityQueue<Node> pq = new PriorityQueue<>((a, b) -> {
		    if (a.freq < b.freq) return -1;
		    return 1;
		});

    public static void main(String[] args) {
        String fileName = args[0];
	File file = new File(fileName);
	Scanner scanner;

	try {
		scanner = new Scanner(file);
	} catch (FileNotFoundException e) {
		return;
	}
	
        String file = scanner.readString();

        count(file);

        for (Map.Entry<Character, Integer> en : freq.entrySet()) {
            Character key = en.getKey();
            Integer val = en.getValue();
            Node newNode = new Node(val, key);
            pq.add(newNode);
        }

	while (pq.size() > 1) {
		Node left = pq.poll();
		Node right = pq.poll();
		Node parent = new Node((left.freq + right.freq), null);

		parent.left = left;
		parent.right = right;
		pq.add(parent);
	}

	Node tree = pq.poll();
    }

    

    public static void count(String word) {
        for (int i = 0; i < word.length(); i++) {
            char character = word.charAt(i);
            if (freq.containsKey(character)) {
                freq.put(character, freq.get(character) + 1);
            } else {
                freq.put(character, 1);
            }
        }
    }

    public static String decode(int intPath) {
	String path = intPath.toString();
	int pathLength = path.length();
	String result = "";
	Node treePath = tree;

	for (int i = 0; i < pathLength; i++) {
		if (path.charAt(i) == 0) {
			treePath = treePath.left;
		} else {
			treePath = treePath.right;
		}
		if (treePath.value != null) {
			result += treePath.value;
		}
	}
	return result;
    }
}
